name: "Build Primer Spec"
description: "Build a Primer Spec website using Jekyll. The output is placed in a directory '_site/'."
inputs:
  build_jekyll_site:
    description: |
      WARNING: If you're not sure if you need this, you probably don't. Simply
      don't provide this value and use the default.
      If set to false, this action will not attempt to build the Jekyll site.
      Use this when you want to customize the Jekyll build (but still perform
      PDF generation).
    required: false
    default: true
    type: boolean
  configure_github_pages:
    description: |
      WARNING: If you're not sure if you need this, you probably don't. Simply
      don't provide this value and use the default.
      If set to false, this action will not attempt to use
      `actions/configure-pages`. Use this when
    require: false
    default: true
    type: boolean
runs:
  using: "composite"
  steps:
    # A Ruby environment is required to build Jekyll websites. Use the
    # official GH action provided by Ruby.
    # Docs: https://github.com/ruby/setup-ruby
    - name: üíé Setup Ruby
      if: ${{ inputs.build_jekyll_site }}
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: "3.0"
        bundler-cache: true # runs 'bundle install' and caches installed gems automatically
        cache-version: 0 # Increment this number if you need to re-download cached gems

    - name: Setup Pages
      id: pages
      if: ${{ inputs.configure_github_pages }}
      uses: actions/configure-pages@v2

    # If a baseurl isn't specified, GitHub Pages + GitHub Actions appears to
    # use "pages" as the default.
    # This step draws inspiration from the starter-action that also sets the
    # baseurl:
    # https://github.com/actions/starter-workflows/blob/5e60d02759829e0e27db87bd924ea5b45dd8503d/pages/jekyll.yml#L46
    - name: Specify Jekyll baseurl
      if: ${{ inputs.build_jekyll_site }}
      shell: bash
      env:
        BASE_PATH: ${{ steps.pages.outputs.base_path }}
      run: |
        config_path="$(find . -name '_config.yml' -not -path './vendor/*' | head -n 1)"
        echo "Found config file: $config_path"
        echo "Using baseurl: $BASE_PATH"
        echo "baseurl: $BASE_PATH" >> $config_path

    # Build the Jekyll site. This GH action from the marketplace is
    # indirectly endorsed by Jekyll, and simply builds the Jekyll site
    # without deploying it. The Jekyll build output is placed in an `_site/`
    # directory.
    # Docs: https://github.com/limjh16/jekyll-action-ts
    - name: üõ† Build Jekyll site
      if: ${{ inputs.build_jekyll_site }}
      uses: limjh16/jekyll-action-ts@v2
      with:
        enable_cache: true

    # Install Chromedriver. We'll use this to generate PDFs.
    # Docs: https://github.com/browser-actions/setup-chrome
    - name: üï∏ Setup Chromedriver
      uses: browser-actions/setup-chrome@latest

    # Generate PDFs for each Primer Spec HTML page in _site/
    - name: üìë Generate PDFs
      shell: bash
      # Keep this in sync with ./generate-pdfs
      run: |
        echo "::group::Creating PDFs"
        grep -l "window\.PrimerSpecConfig" _site/**/*.html _site/*.html | while read -r file
        do
          relativePath=${file#_site/}
          pdfFile="_site/assets/primer-spec-pdf/${relativePath%.html}.pdf"
          pdfFileDir=${pdfFile%/*}
          echo "Source: $file"
          echo "Dest: $pdfFile"
          echo "In directory: $pdfFileDir"
          echo ""
          mkdir -p $pdfFileDir
          chrome --headless --disable-gpu --disable-software-rasterizer --run-all-compositor-stages-before-draw --virtual-time-budget=1000 --print-to-pdf-no-header --print-to-pdf="$pdfFile" $file
          # Chrome appears to provide r/w permissions only to the `user/owner` group,
          # so GitHub Pages is unable to read the file.
          # HUGE thanks to Arthur from GitHub Support for figuring this out! ‚ù§Ô∏è
          chmod a+r $pdfFile
          # Update the corresponding HTML file so Primer Spec knows that a PDF is
          # available.
          sed -i "s=pdfPath:.*// @managed by build-primer-spec-action=pdfPath: '${pdfFile#_site/}', // @managed by build-primer-spec-action=" $file
        done
        echo "::endgroup::"
