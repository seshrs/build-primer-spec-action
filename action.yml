name: "Build Primer Spec"
description: "Build a Primer Spec website using Jekyll. The output is placed in a directory '_site/'."
runs:
  using: "composite"
  steps:
    # A Ruby environment is required to build Jekyll websites. Use the
    # official GH action provided by Ruby.
    # Docs: https://github.com/ruby/setup-ruby
    - name: üíé Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: "3.0"

    # If a baseurl isn't specified, GitHub Pages + GitHub Actions appears to
    # use "pages" as the default.
    # This step draws inspiration from the starter-action that also sets the
    # baseurl:
    # https://github.com/actions/starter-workflows/blob/5e60d02759829e0e27db87bd924ea5b45dd8503d/pages/jekyll.yml#L46
    - name: Specify Jekyll baseurl
      run: |
        config_path="$(find . -name "_config.yml" | head -n 1)"
        echo "baseurl: ${{ steps.pages.outputs.base_path }}" >> $config_path

    # Build the Jekyll site. This GH action from the marketplace is
    # indirectly endorsed by Jekyll, and simply builds the Jekyll site
    # without deploying it. The Jekyll build output is placed in an `_site/`
    # directory.
    # Docs: https://github.com/limjh16/jekyll-action-ts
    - name: üõ† Build Jekyll site
      uses: limjh16/jekyll-action-ts@v2
      with:
        enable_cache: true

    # Install Chromedriver. We'll use this to generate PDFs.
    # Docs: https://github.com/browser-actions/setup-chrome
    - name: üï∏ Setup Chromedriver
      uses: browser-actions/setup-chrome@latest

    # Generate PDFs for each Primer Spec HTML page in _site/
    - name: üìë Generate PDFs
      shell: bash
      # Keep this in sync with ./generate-pdfs
      run: |
        echo "::group::Creating PDFs"
        grep -l "window\.PrimerSpecConfig" _site/**/*.html _site/*.html | while read -r file
        do
          relativePath=${file#_site/}
          pdfFile="_site/assets/primer-spec-pdf/${relativePath%.html}.pdf"
          pdfFileDir=${pdfFile%/*}
          echo "Source: $file"
          echo "Dest: $pdfFile"
          echo "In directory: $pdfFileDir"
          echo ""
          mkdir -p $pdfFileDir
          chrome --headless --disable-gpu --disable-software-rasterizer --run-all-compositor-stages-before-draw --virtual-time-budget=1000 --print-to-pdf-no-header --print-to-pdf="$pdfFile" $file
          # Chrome appears to provide r/w permissions only to the `user/owner` group,
          # so GitHub Pages is unable to read the file.
          # HUGE thanks to Arthur from GitHub Support for figuring this out! ‚ù§Ô∏è
          chmod a+r $pdfFile
        done
        echo "::endgroup::"
