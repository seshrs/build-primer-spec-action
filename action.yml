name: "Build Primer Spec"
description: "Build a Primer Spec website using Jekyll. The output is placed in a directory '_site/'."
inputs:
  generate_pdfs:
    description: |
      If set to "false", this action will not generate PDF versions of every
      page.
    required: false
    default: "true"
    type: string
  build_jekyll_site:
    description: |
      WARNING: If you're not sure if you need this, you probably don't. Simply
      don't provide this value and use the default.
      If set to false, this action will not attempt to build the Jekyll site.
      Use this when you want to customize the Jekyll build (but still perform
      PDF generation).
    required: false
    default: "true"
    # Weird bug: In Composite Actions, GitHub treats booleans as strings. To
    # avoid confusion, I'm just going to use string inputs ‚Äî only 'true' is
    # truthy in this Action, any other input is falsy.
    # https://github.com/actions/runner/issues/1483
    type: string
  configure_github_pages:
    description: |
      WARNING: If you're not sure if you need this, you probably don't. Simply
      don't provide this value and use the default.
      If set to false, this action will not attempt to use
      `actions/configure-pages`. Use this when
    required: false
    default: "true"
    type: boolean
runs:
  using: "composite"
  steps:
    # A Ruby environment is required to build Jekyll websites. Use the
    # official GH action provided by Ruby.
    # Docs: https://github.com/ruby/setup-ruby
    - name: üíé Setup Ruby
      if: ${{ inputs.build_jekyll_site == 'true' }}
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: "3.0"
        bundler-cache: true # runs 'bundle install' and caches installed gems automatically
        cache-version: 0 # Increment this number if you need to re-download cached gems

    - name: Setup Pages
      id: pages
      if: ${{ inputs.configure_github_pages == 'true' }}
      uses: actions/configure-pages@v2

    # If a baseurl isn't specified, GitHub Pages + GitHub Actions appears to
    # use "pages" as the default.
    # This step draws inspiration from the starter-action that also sets the
    # baseurl:
    # https://github.com/actions/starter-workflows/blob/5e60d02759829e0e27db87bd924ea5b45dd8503d/pages/jekyll.yml#L46
    - name: Specify Jekyll url and baseurl
      if: ${{ inputs.build_jekyll_site == 'true' }}
      shell: bash
      env:
        BASE_PATH: ${{ steps.pages.outputs.base_path }}
        ORIGIN: ${{ steps.pages.outputs.origin }}
      run: |
        config_path="$(find . -name '_config.yml' -not -path './vendor/*' | head -n 1)"
        echo "Found config file: $config_path"
        echo "Using baseurl: $BASE_PATH"
        echo "baseurl: $BASE_PATH" >> $config_path
        echo "Using url: $ORIGIN"
        echo "url: $ORIGIN" >> $config_path

    # Build the Jekyll site. This GH action from the marketplace is
    # indirectly endorsed by Jekyll, and simply builds the Jekyll site
    # without deploying it. The Jekyll build output is placed in an `_site/`
    # directory.
    # Docs: https://github.com/limjh16/jekyll-action-ts
    - name: üõ† Build Jekyll site
      if: ${{ inputs.build_jekyll_site == 'true' }}
      uses: limjh16/jekyll-action-ts@v2
      with:
        enable_cache: true

    # Install Chromedriver. We'll use this to generate PDFs.
    # Docs: https://github.com/browser-actions/setup-chrome
    - name: üï∏ Setup Chromedriver
      if: ${{ inputs.generate_pdfs == 'true' }}
      uses: browser-actions/setup-chrome@latest
      with:
        chrome-version: stable

    # Generate PDFs for each Primer Spec HTML page in _site/
    - name: üìë Generate PDFs
      if: ${{ inputs.generate_pdfs == 'true' }}
      shell: bash
      # Keep this in sync with ./generate-pdfs
      run: |
        # Ignore failures due to grep when piped.
        # https://stackoverflow.com/a/11231970/5868796
        set +o pipefail

        # These are magic workflow commands for GitHub Actions
        # Docs: https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#grouping-log-lines
        echo "::group::Creating PDFs"
        echo "List of files:"
        grep -s -l "window\.PrimerSpecConfig" _site/**/*.html _site/*.html | cat
        echo "Generating PDFs..."
        grep -s -l "window\.PrimerSpecConfig" _site/**/*.html _site/*.html | while read -r file
        do
          relativePath=${file#_site/}
          pdfFile="_site/assets/primer-spec-pdf/${relativePath%.html}.pdf"
          pdfFileDir=${pdfFile%/*}
          echo "Source: $file"
          echo "Dest: $pdfFile"
          echo "In directory: $pdfFileDir"
          echo ""
          mkdir -p $pdfFileDir
          echo "Writing to $pdfFile..."
          chrome --headless --disable-gpu --disable-software-rasterizer --run-all-compositor-stages-before-draw --virtual-time-budget=3000 --print-to-pdf-no-header --print-to-pdf="$pdfFile" $file
          # Chrome appears to provide r/w permissions only to the `user/owner` group,
          # so GitHub Pages is unable to read the file.
          # HUGE thanks to Arthur from GitHub Support for figuring this out! ‚ù§Ô∏è
          echo "Making the PDF readable to GitHub Pages..."
          chmod a+r $pdfFile
          # Update the corresponding HTML file so Primer Spec knows that a PDF is
          # available.
          echo "Updating the corresponding HTML file to include PDF path: ${pdfFile#_site/}"
          sed -i "s=pdfPath:.*// @managed by build-primer-spec-action=pdfPath: '${pdfFile#_site/}', // @managed by build-primer-spec-action=" $file
          echo "Done."
        done
        echo "::endgroup::"
